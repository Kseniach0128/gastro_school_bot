
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

MENU, FAQ, QUESTION = range(3)

reply_keyboard = [['1Ô∏è‚É£ –ü—Ä–æ–≥—Ä–∞–º–º–∞', '2Ô∏è‚É£ FAQ'],
                  ['3Ô∏è‚É£ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ', '4Ô∏è‚É£ –ö–µ–π—Å—ã'],
                  ['5Ô∏è‚É£ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–∏—ë–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ ¬´–®–∫–æ–ª—ã –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏–∏¬ª. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=markup
    )
    return MENU

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if "1Ô∏è‚É£" in text:
        await update.message.reply_text(
            "–ù–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ ‚Äî —ç—Ç–æ 6 –º–µ—Å—è—Ü–µ–≤ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å —à–µ—Ñ–∞–º–∏.\n–ú–æ–¥—É–ª–∏: –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è, —Å–µ—Ä–≤–∏—Å, —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞.\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://school.link/program"
        )
    elif "2Ô∏è‚É£" in text:
        await update.message.reply_text(
            "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n1. –ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É?\n2. –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?\n3. –ï—Å—Ç—å –ª–∏ –æ–±—â–µ–∂–∏—Ç–∏–µ?\n4. –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã?\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∏–ª–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å."
        )
        return FAQ
    elif "3Ô∏è‚É£" in text:
        await update.message.reply_text(
            "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ:\n1. –ó–∞—è–≤–∫–∞ –æ–Ω–ª–∞–π–Ω\n2. –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ\n3. –û—Ç–≤–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏\n–§–æ—Ä–º–∞: https://school.link/apply"
        )
    elif "4Ô∏è‚É£" in text:
        await update.message.reply_text(
            "üíº –£—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã:\n- –ê–ª–µ–∫—Å–µ–π –ö. ‚Äî —à–µ—Ñ –≤ –ú–∏—à–ª–µ–Ω-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ\n- –ú–∞—Ä–∏—è –ü. ‚Äî –æ—Ç–∫—Ä—ã–ª–∞ –≥–∞—Å—Ç—Ä–æ–±–∞—Ä\n–ë–æ–ª—å—à–µ: https://school.link/cases"
        )
    elif "5Ô∏è‚É£" in text:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
        return QUESTION

    return MENU

async def handle_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = update.message.text
    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å: ¬´{question}¬ª. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
    return MENU

async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_question = update.message.text
    await update.message.reply_text(f"–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É: ¬´{user_question}¬ª. –°–ø–∞—Å–∏–±–æ!")
    return MENU

def main():
    application = ApplicationBuilder().token("YOUR_TELEGRAM_BOT_TOKEN").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu)],
            FAQ: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_faq)],
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
        },
        fallbacks=[]
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()
